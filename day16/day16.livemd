# Day 16

## Setup

```elixir
test_input = """
Valve AA has flow rate=0; tunnels lead to valves DD, II, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve CC has flow rate=2; tunnels lead to valves DD, BB
Valve DD has flow rate=20; tunnels lead to valves CC, AA, EE
Valve EE has flow rate=3; tunnels lead to valves FF, DD
Valve FF has flow rate=0; tunnels lead to valves EE, GG
Valve GG has flow rate=0; tunnels lead to valves FF, HH
Valve HH has flow rate=22; tunnel leads to valve GG
Valve II has flow rate=0; tunnels lead to valves AA, JJ
Valve JJ has flow rate=21; tunnel leads to valve II
"""

input = File.read!("./input.txt")
```

```elixir
defmodule Valves do
  defstruct [:valves, :paths]

  defmodule Valve do
    defstruct [:name, :rate, :neighbors]
  end

  def parse(str) do
    valves =
      str
      |> String.split("\n", trim: true)
      |> Enum.map(&parse_valve/1)
      |> Enum.into(%{}, fn v = %Valve{name: n} -> {n, v} end)

    all = Map.keys(valves)
    paths = Enum.reduce(all, %{}, &add_paths(&1, all, valves, &2))
    %Valves{valves: valves, paths: paths}
  end

  defp parse_valve(str) do
    words = String.split(str)
    valve = Enum.at(words, 1)

    rate =
      Enum.at(words, 4)
      |> String.trim_leading("rate=")
      |> String.trim(";")
      |> String.to_integer()

    neighbors =
      Enum.drop(words, 9)
      |> Enum.map(&String.trim(&1, ","))

    %Valve{name: valve, rate: rate, neighbors: neighbors}
  end

  defp add_paths(_, [], _, acc), do: acc

  defp add_paths(a, [b | rest], valves, acc) do
    add_paths(
      a,
      rest,
      valves,
      Map.put(acc, {a, b}, add_path([{a, []}], b, valves, MapSet.new([a])))
    )
  end

  defp add_path([], _, _, _), do: nil
  defp add_path([{a, p} | _rest], a, _, _), do: {Enum.reverse(p), length(p)}

  defp add_path([{curr, path} | rest], target, valves, visited) do
    curr_valve = Map.get(valves, curr)

    neighbors =
      curr_valve.neighbors
      |> Enum.reject(&MapSet.member?(visited, &1))
      |> Enum.map(&{&1, [&1 | path]})

    add_path(rest ++ neighbors, target, valves, MapSet.put(visited, curr))
  end

  def plan(v = %Valves{valves: valves}, time) do
    keys =
      Map.keys(valves)
      |> Enum.reject(fn k -> Map.get(valves, k).rate == 0 end)

    do_plan([{"AA", keys, time, []}], v, 0)
  end

  defp do_plan([], _, best), do: best

  defp do_plan([{_loc, [], _time, acc} | rest], v, best) do
    handle_end(acc, rest, v, best)
  end

  defp do_plan([{_loc, _left, time, acc} | rest], v, best) when time <= 0 do
    handle_end(acc, rest, v, best)
  end

  defp do_plan([{loc, left, time, acc} | rest], v = %Valves{}, best) do
    next =
      Enum.map(left, &npv(loc, &1, time, v))
      |> Enum.map(&npv_to_node(&1, left, acc))

    do_plan(next ++ rest, v, best)
  end

  defp handle_end(acc, rest, v, best) do
    total = sum_values(acc)
    new_best = if total > best, do: total, else: best
    do_plan(rest, v, new_best)
  end

  defp npv_to_node(npv = {_value, dest, run_time}, left, acc) do
    {
      dest,
      List.delete(left, dest),
      run_time,
      [npv | acc]
    }
  end

  defp sum_values(acc) do
    acc
    |> Enum.map(fn {value, _, _} -> value end)
    |> Enum.sum()
  end

  def npv(curr, dest, time_remaining, %Valves{valves: valves, paths: paths}) do
    {_, dist} = Map.get(paths, {curr, dest})
    run_time = time_remaining - (dist + 1)
    rate = Map.get(valves, dest).rate
    value = run_time * rate
    value = if value < 0, do: 0, else: value
    {value, dest, run_time}
  end

  def plan2(v = %Valves{valves: valves}, time) do
    keys =
      Map.keys(valves)
      |> Enum.reject(fn k -> Map.get(valves, k).rate == 0 end)

    do_plan2([{{"AA", 0}, {"AA", 0}, keys, 0, 0}], time, v, 0)
  end

  defp do_plan2([], _, _, best), do: best

  defp do_plan2(
         [{{l1, l1_time}, {l2, l2_time}, [], _curr_time, total} | rest],
         target_time,
         v = %Valves{valves: valves},
         best
       ) do
    l1_value = curr_value(l1, l1_time, target_time, valves)
    l2_value = curr_value(l2, l2_time, target_time, valves)
    new_total = total + l1_value + l2_value
    new_best = if new_total > best, do: new_total, else: best

    if new_best > best do
      IO.inspect({:done1, new_best})
    end

    do_plan2(rest, target_time, v, new_best)
  end

  defp do_plan2([{{_a, _t1}, {_b, _t2}, _left, curr_time, total} | rest], target_time, v, best)
       when curr_time >= target_time do
    new_best = if total > best, do: total, else: best

    if new_best > best do
      IO.inspect({:done2, new_best})
    end

    do_plan2(rest, target_time, v, new_best)
  end

  defp do_plan2(
         [{{l1, curr_time}, {l2, curr_time}, left, curr_time, total} | rest],
         target_time,
         v = %Valves{valves: valves},
         best
       ) do
    l1_value = curr_value(l1, curr_time, target_time, valves)
    l2_value = curr_value(l2, curr_time, target_time, valves)
    new_total = total + l1_value + l2_value

    next1 = Enum.map(left, &future_state(l1, &1, curr_time, v))
    next2 = Enum.map(left, &future_state(l2, &1, curr_time, v))

    combined =
      for {dest1, time1} <- next1, {dest2, time2} <- next2, dest1 != dest2 do
        new_time = min(time1, time2)

        {{dest1, time1}, {dest2, time2}, List.delete(List.delete(left, dest1), dest2), new_time,
         new_total}
      end

    # IO.inspect({:both, curr_time, combined})

    do_plan2(combined ++ rest, target_time, v, best)
  end

  defp do_plan2(
         [{{l1, curr_time}, {l2, l2_time}, left, curr_time, total} | rest],
         target_time,
         v = %Valves{valves: valves},
         best
       ) do
    l1_value = curr_value(l1, curr_time, target_time, valves)
    new_total = total + l1_value

    next1 = Enum.map(left, &future_state(l1, &1, curr_time, v))

    combined =
      for {dest1, time1} <- next1 do
        new_time = min(time1, l2_time)
        {{dest1, time1}, {l2, l2_time}, List.delete(left, dest1), new_time, new_total}
      end

    # IO.inspect({:left, curr_time, combined})

    do_plan2(combined ++ rest, target_time, v, best)
  end

  defp do_plan2(
         [{{l1, l1_time}, {l2, curr_time}, left, curr_time, total} | rest],
         target_time,
         v,
         best
       ) do
    do_plan2(
      [{{l2, curr_time}, {l1, l1_time}, left, curr_time, total} | rest],
      target_time,
      v,
      best
    )
  end

  defp do_plan2([{l1, l2, left, curr_time, total} | rest], target_time, v, best) do
    raise("should be skipping time")
    do_plan2([{l1, l2, left, curr_time + 1, total} | rest], target_time, v, best)
  end

  def curr_value(valve, curr_time, target_time, valves) do
    rate = Map.get(valves, valve).rate
    rem = target_time - curr_time
    rem = if rem < 0, do: 0, else: rem
    # IO.inspect({:value, valve, rate, curr_time, target_time, rate*rem})
    rate * rem
  end

  def future_state(curr, dest, curr_time, %Valves{paths: paths}) do
    {_, dist} = Map.get(paths, {curr, dest})
    {dest, curr_time + dist + 1}
  end
end
```

## Part 1

```elixir
input
|> Valves.parse()
|> Valves.plan(30)
```

## Part 2

```elixir
input
|> Valves.parse()
|> Valves.plan2(26)
```

Guessed 2652 after letting it run overnight. That answer was too low.
