# Day 15

## Setup

```elixir
test_input = """
Sensor at x=2, y=18: closest beacon is at x=-2, y=15
Sensor at x=9, y=16: closest beacon is at x=10, y=16
Sensor at x=13, y=2: closest beacon is at x=15, y=3
Sensor at x=12, y=14: closest beacon is at x=10, y=16
Sensor at x=10, y=20: closest beacon is at x=10, y=16
Sensor at x=14, y=17: closest beacon is at x=10, y=16
Sensor at x=8, y=7: closest beacon is at x=2, y=10
Sensor at x=2, y=0: closest beacon is at x=2, y=10
Sensor at x=0, y=11: closest beacon is at x=2, y=10
Sensor at x=20, y=14: closest beacon is at x=25, y=17
Sensor at x=17, y=20: closest beacon is at x=21, y=22
Sensor at x=16, y=7: closest beacon is at x=15, y=3
Sensor at x=14, y=3: closest beacon is at x=15, y=3
Sensor at x=20, y=1: closest beacon is at x=15, y=3
"""

input = File.read!("./input.txt")
```

```elixir
defmodule Sensors do
  def parse(str) do
    str
    |> String.split("\n", trim: true)
    |> Enum.map(&parse_row/1)
    |> Enum.map(fn x -> {x, distance(x)} end)
  end

  defp parse_row(str) do
    words = String.split(str)
    sx = parse_num(words, 2)
    sy = parse_num(words, 3)
    bx = parse_num(words, 8)
    by = parse_num(words, 9)
    {{sx, sy}, {bx, by}}
  end

  defp parse_num(words, idx) do
    Enum.at(words, idx)
    |> String.trim(",")
    |> String.trim(":")
    |> String.trim_leading("x=")
    |> String.trim_leading("y=")
    |> String.to_integer()
  end

  defp distance({{x1, y1}, {x2, y2}}) do
    abs(x1 - x2) + abs(y1 - y2)
  end

  def coverage(sensors, row) do
    sensors
    |> Enum.reduce(MapSet.new(), &compute_coverage(&1, row, &2))
  end

  defp compute_coverage({{s = {x, y}, _}, dist}, row, acc) do
    if row < y - dist || row > y + dist do
      acc
    else
      points =
        for cx <- (x - dist)..(x + dist), distance({s, {cx, row}}) <= dist do
          {cx, row}
        end

      MapSet.union(acc, MapSet.new(points))
    end
  end

  def row_non_beacon(sensors, coverage, row) do
    points =
      coverage
      |> MapSet.to_list()
      |> Enum.filter(fn {_, y} -> y == row end)
      |> Enum.into(MapSet.new())

    beacons = Enum.into(sensors, MapSet.new(), fn {{_, b}, _} -> b end)
    MapSet.difference(points, beacons)
  end

  def boundary({{{x, y}, _}, dist}) do
    a = diagonal({x, y - (dist + 1)}, {x + (dist + 1), y}, fn {x, y} -> {x + 1, y + 1} end)
    b = diagonal({x + (dist + 1), y}, {x, y + (dist + 1)}, fn {x, y} -> {x - 1, y + 1} end)
    c = diagonal({x, y + (dist + 1)}, {x - (dist + 1), y}, fn {x, y} -> {x - 1, y - 1} end)
    d = diagonal({x - (dist + 1), y}, {x, y - (dist + 1)}, fn {x, y} -> {x + 1, y - 1} end)
    a ++ b ++ c ++ d
  end

  defp diagonal(from, to, f, acc \\ [])
  defp diagonal(a, a, _, acc), do: acc

  defp diagonal(from, to, f, acc) do
    diagonal(f.(from), to, f, [from | acc])
  end

  defp point_covered({x, y}, _, min, max) when x < min or y < min or x > max or y > max, do: true
  defp point_covered(_p, [], _, _), do: false

  defp point_covered(p, [{{s, _}, dist} | rest], min, max) do
    if distance({s, p}) <= dist do
      true
    else
      point_covered(p, rest, min, max)
    end
  end

  def check_boundaries([], _, _, _), do: nil

  def check_boundaries([a | rest], all, min, max) do
    b =
      boundary(a)
      |> Enum.reject(&point_covered(&1, all, min, max))

    if Enum.count(b) != 0 do
      b
    else
      check_boundaries(rest, all, min, max)
    end
  end
end
```

## Part 1

```elixir
# row = 2000000
row = 10

sensors =
  test_input
  |> Sensors.parse()

points = Sensors.coverage(sensors, row)

Sensors.row_non_beacon(sensors, points, row)
|> Enum.count()
```

## Part 2

```elixir
# {min, max} = {0, 20}
{min, max} = {0, 4_000_000}

sensors =
  input
  |> Sensors.parse()

[{x, y}] = Sensors.check_boundaries(sensors, sensors, min, max)
4_000_000 * x + y
```
