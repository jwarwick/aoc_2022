# Day 18

## Setup

```elixir
test_input = """
2,2,2
1,2,2
3,2,2
2,1,2
2,3,2
2,2,1
2,2,3
2,2,4
2,2,6
1,2,5
3,2,5
2,1,5
2,3,5
"""

input = File.read!("./input.txt")
```

```elixir
defmodule Boulders do
  def parse(str) do
    str
    |> String.split("\n", trim: true)
    |> Enum.map(&String.split(&1, ",", trim: true))
    |> Enum.map(fn [x, y, z] ->
      {String.to_integer(x), String.to_integer(y), String.to_integer(z)}
    end)
    |> MapSet.new()
  end

  def surface_area(m) do
    m
    |> MapSet.to_list()
    |> Enum.map(&count_uncovered_sides(&1, m))
    |> Enum.sum()
  end

  defp count_uncovered_sides(p, m) do
    p
    |> neighbors()
    |> Enum.reject(&MapSet.member?(m, &1))
    |> Enum.count()
  end

  defp neighbors({x, y, z}) do
    [{x + 1, y, z}, {x - 1, y, z}, {x, y + 1, z}, {x, y - 1, z}, {x, y, z + 1}, {x, y, z - 1}]
  end

  def count_water_faces(m) do
    nodes = MapSet.to_list(m)
    {minx, maxx} = Enum.map(nodes, fn {x, _, _} -> x end) |> Enum.min_max()
    {miny, maxy} = Enum.map(nodes, fn {_, y, _} -> y end) |> Enum.min_max()
    {minz, maxz} = Enum.map(nodes, fn {_, _, z} -> z end) |> Enum.min_max()
    bounds = {{minx - 2, maxx + 2}, {miny - 2, maxy + 2}, {minz - 2, maxz + 2}}

    start = {minx - 2, miny - 2, minz - 2}
    water = flood_water([start], MapSet.new([]), MapSet.new([start]), m, bounds)

    Enum.map(nodes, &count_water_sides(&1, water))
    |> Enum.sum()
  end

  defp count_water_sides(p, water) do
    p
    |> neighbors()
    |> Enum.filter(&MapSet.member?(water, &1))
    |> Enum.count()
  end

  def point_in_bounds({x, y, z}, {{minx, maxx}, {miny, maxy}, {minz, maxz}}) do
    x >= minx && x <= maxx && y >= miny && y <= maxy && z >= minz && z <= maxz
  end

  def flood_water([], acc, _, _, _), do: acc

  def flood_water([curr | rest], water, seen, m, bounds) do
    neighs =
      neighbors(curr)
      |> Enum.reject(&MapSet.member?(m, &1))
      |> Enum.reject(&MapSet.member?(seen, &1))
      |> Enum.filter(&point_in_bounds(&1, bounds))

    flood_water(
      rest ++ neighs,
      MapSet.put(water, curr),
      MapSet.union(seen, MapSet.new(neighs)),
      m,
      bounds
    )
  end

  def exterior_surface_area(m) do
    nodes = MapSet.to_list(m)
    # IO.inspect({:node_count, Enum.count(nodes)})
    all_neighbors = Enum.flat_map(nodes, &neighbors/1)
    # IO.inspect({:all_count, Enum.count(all_neighbors)})
    all_neighbors
    |> Enum.reject(&MapSet.member?(m, &1))
    |> Enum.uniq()

    inside_nodes = Enum.reduce(all_neighbors, MapSet.new(), &check_neighbors(&1, &2, m))
    IO.inspect(inside_nodes)
    inside_nodes = MapSet.union(inside_nodes, m)

    surface_area(inside_nodes)
  end

  def check_neighbors(node, acc, m) do
    {contained?, visited} = flood_contains(500, [node], acc, MapSet.new(), m)

    if contained? do
      MapSet.union(visited, acc)
    else
      acc
    end
  end

  defp flood_contains(0, _n, _acc, visited, _m), do: {false, visited}
  defp flood_contains(_cnt, [], _acc, visited, _m), do: {true, visited}

  defp flood_contains(cnt, [n | rest], acc, visited, m) do
    if MapSet.member?(m, n) do
      visited = MapSet.put(visited, n)
      flood_contains(cnt, rest, acc, visited, m)
    else
      # if MapSet.member?(acc, n) do
      #  {true, visited}
      # else
      visited = MapSet.put(visited, n)

      neigh =
        neighbors(n)
        # |> Enum.reject(&(MapSet.member?(m, &1))) 
        |> Enum.reject(&MapSet.member?(visited, &1))

      flood_contains(cnt - 1, neigh ++ rest, acc, visited, m)
    end
  end
end
```

## Part 1

```elixir
input
|> Boulders.parse()
|> Boulders.surface_area()
```

## Part 2

```elixir
# input
# |> Boulders.parse()
# |> Boulders.exterior_surface_area()
```

Guessed 3464, that's too high

Guessed 3430, that's too high

<!-- livebook:{"break_markdown":true} -->

Don't know what's wrong with that code. Let's try finding all the exterior water instead.

```elixir
input
|> Boulders.parse()
|> Boulders.count_water_faces()
```
