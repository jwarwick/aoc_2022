# Day 13

## Setup

```elixir
test_input = """
[1,1,3,1,1]
[1,1,5,1,1]

[[1],[2,3,4]]
[[1],4]

[9]
[[8,7,6]]

[[4,4],4,4]
[[4,4],4,4,4]

[7,7,7,7]
[7,7,7]

[]
[3]

[[[]]]
[[]]

[1,[2,[3,[4,[5,6,7]]]],8,9]
[1,[2,[3,[4,[5,6,0]]]],8,9]
"""

input = File.read!("./input.txt")
```

```elixir
defmodule Signal do
  def parse(str) do
    str
    |> String.split("\n\n", trim: true)
    |> Enum.map(&parse_pair/1)
  end

  def parse_pair(str) do
    str
    |> String.split("\n", trim: true)
    |> Enum.map(&Code.eval_string/1)
    |> Enum.map(fn {x, _} -> x end)
  end

  def parse_all(str) do
    str
    |> String.split("\n", trim: true)
    |> Enum.map(&Code.eval_string/1)
    |> Enum.map(fn {x, _} -> x end)
  end

  def compare([a, b]) do
    # IO.inspect({:a, a})
    # IO.inspect({:b, b})
    result = do_compare(a, b)

    if result == true || result == nil do
      true
    else
      false
    end
  end

  def do_compare([], []) do
    # IO.inspect("both empty")
    nil
  end

  def do_compare([], b = [_b | _brest]) do
    # IO.inspect({"left is empty", [], b})
    true
  end

  def do_compare(a = [_a | _arest], []) do
    # IO.inspect({"right is empty", a, []})
    false
  end

  def do_compare([a | arest], b2 = [b | _brest]) when is_list(b) and is_integer(a) do
    # IO.inspect({"converting left to list", a, b})
    do_compare([[a] | arest], b2)
  end

  def do_compare(a2 = [a | _arest], [b | brest]) when is_list(a) and is_integer(b) do
    # IO.inspect({"converting right to list", a, b})
    do_compare(a2, [[b] | brest])
  end

  def do_compare([a | _arest], [b | _brest]) when is_integer(a) and is_integer(b) and b < a do
    # IO.inspect({"a > b", a, b})
    false
  end

  def do_compare([a | _arest], [b | _brest]) when is_integer(a) and is_integer(b) and a < b do
    # IO.inspect({"a < b", a, b})
    true
  end

  def do_compare([a | arest], [b | brest]) when is_integer(a) and is_integer(b) do
    # IO.inspect({"a = b", a, b})
    do_compare(arest, brest)
  end

  def do_compare([a | arest], [b | brest]) when is_list(a) and is_list(b) do
    # IO.inspect({"both lists", a, b})
    case do_compare(a, b) do
      true -> true
      false -> false
      nil -> do_compare(arest, brest)
    end
  end
end
```

## Part 1

```elixir
input
|> Signal.parse()
|> Enum.map(&Signal.compare/1)
|> Enum.with_index()
|> Enum.filter(fn {x, _} -> x end)
|> Enum.map(fn {_, x} -> x + 1 end)
|> Enum.sum()
```

## Part 2

```elixir
div1 = [[2]]
div2 = [[6]]

input
|> Signal.parse_all()
|> Enum.concat([div1, div2])
|> Enum.sort(&Signal.compare([&1, &2]))
|> Enum.with_index()
|> Enum.filter(fn {val, _} -> val == div1 || val == div2 end)
|> Enum.map(fn {_, idx} -> idx + 1 end)
|> Enum.reduce(&(&1 * &2))
```
